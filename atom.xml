<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心有所向，日复一日，必有精进</title>
  
  <subtitle>欢迎来到ELement_GC的咸鱼博客</subtitle>
  <link href="https://elementgc.github.io/atom.xml" rel="self"/>
  
  <link href="https://elementgc.github.io/"/>
  <updated>2023-05-23T13:21:03.817Z</updated>
  <id>https://elementgc.github.io/</id>
  
  <author>
    <name>Element_GC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 常用指令小合集</title>
    <link href="https://elementgc.github.io/2023/05/23/usual-git-command/"/>
    <id>https://elementgc.github.io/2023/05/23/usual-git-command/</id>
    <published>2023-05-23T13:18:04.828Z</published>
    <updated>2023-05-23T13:21:03.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="清空本地的Git关联的远程仓库（删库跑路）"><a href="#清空本地的Git关联的远程仓库（删库跑路）" class="headerlink" title="清空本地的Git关联的远程仓库（删库跑路）"></a>清空本地的Git关联的远程仓库（删库跑路）</h2><ul><li>如果您想要删除本地仓库的所有文件、分支和提交，但<strong>保留</strong>远程仓库的链接，您可以在本地仓库的目录中执行以下命令¹：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .git</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>如果您想要删除本地仓库的所有文件、分支和提交，并且<strong>断开</strong>远程仓库的链接，您可以直接删除本地仓库的目录，或者在本地仓库的目录中执行以下命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf *</span><br><span class="line"><span class="built_in">rm</span> -rf .git</span><br></pre></td></tr></table></figure><ul><li>如果您想要保留本地仓库的部分文件、分支和提交，但重置到远程仓库的状态，您可以在本地仓库的目录中执行以下命令³：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><ul><li>如果您想要清除本地仓库中未被Git跟踪的文件，如包、配置、日志等，您可以在本地仓库的目录中执行以下命令⁴：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -d --force</span><br></pre></td></tr></table></figure><ul><li>如果您想要删除本地仓库关联的远程仓库，您可以在本地仓库的目录中执行以下命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> &lt;remote-name&gt;</span><br></pre></td></tr></table></figure><h2 id="针对本地仓库的操作"><a href="#针对本地仓库的操作" class="headerlink" title="针对本地仓库的操作"></a>针对本地仓库的操作</h2><h3 id="初级的git命令"><a href="#初级的git命令" class="headerlink" title="初级的git命令"></a>初级的git命令</h3><ul><li><p><strong>git init</strong>：<strong>初始化</strong>本地仓库（创建新仓库）</p></li><li><p><strong>git clone</strong>：拷贝一份远程仓库，也就是<strong>下载一个项目</strong>。</p></li><li><p><strong>git status</strong>：查看仓库<strong>当前的状态</strong>，显示有变更的文件。</p></li><li><p><strong>git add</strong>：添加文件到暂存区（缓存区）</p></li><li><p><strong>git commit</strong>：提交暂存区到本地仓库。</p></li><li><p><strong>git push</strong>：上传本地仓库到远程仓库并合并。</p></li><li><p><strong>git pull</strong>：下载远程仓库到本地仓库并合并。</p></li><li><p><strong>git branch</strong>：显示本地分支或创建新<strong>分支。</strong></p></li><li><p><strong>git checkout</strong>：切换分支或检出文件。</p></li><li><p><strong>git merge</strong>：合并分支。</p></li><li><p><strong>git log</strong>：查看提交日志。</p></li><li><p><strong>git diff</strong>：比较文件的不同。</p></li><li><p><strong>git reset</strong>：回退版本。</p></li><li><p><strong>git rm</strong>：删除文件。</p></li><li><p><strong>git mv</strong>：移动或重命名文件。</p><hr></li></ul><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><h4 id="git-pull-与-git-clone辨析"><a href="#git-pull-与-git-clone辨析" class="headerlink" title="git pull 与 git clone辨析"></a>git pull 与 git clone辨析</h4><ul><li><strong>git clone</strong>是在本地没有仓库的时候，从远程仓库克隆整个仓库到本地，包括所有的分支、标签、提交历史等。它是一个从无到有的过程，不需要先初始化本地仓库。例如，你可以使用以下命令克隆一个远程仓库到本地：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tensorflow/tensorflow.git</span><br></pre></td></tr></table></figure><ul><li><strong>git pull</strong>是在本地有仓库的情况下，从远程仓库获取最新的版本，并与本地分支合并。它相当于先执行<code>git fetch</code>，然后再执行<code>git merge</code>。例如，你可以使用以下命令拉取远程master分支的最新版本，并与本地master分支合并：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><ul><li><strong>git clone</strong>和<strong>git pull</strong>的主要区别是：<strong>git clone</strong>只需要执行一次，就可以在本地创建一个完整的远程仓库的副本；而<strong>git pull</strong>需要在本地已经存在一个远程仓库的副本的基础上，定期执行，以保持本地和远程的同步。</li></ul><h4 id="gitclone-使用时的注意事项"><a href="#gitclone-使用时的注意事项" class="headerlink" title="gitclone 使用时的注意事项"></a>gitclone 使用时的注意事项</h4><ul><li>git clone默认是克隆远程仓库的master分支，也就是HEAD指向的分支。如果你想确定下载下来的是哪一个分支，你可以使用以下命令查看：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><p>这个命令会显示本地和远程的所有分支，你可以看到当前分支有一个星号（*）标记，通常是master分支。你也可以看到远程仓库的其他分支，它们的前缀是<code>remotes/origin/</code>。</p><ul><li><ul><li>如果运行时你的<code>git bash</code>显示的是</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: not a git repository (or any of the parent directories): .git</span><br></pre></td></tr></table></figure><p>那就说明你<strong>还没有进入到</strong>克隆的仓库的文件夹中，建议返回文件夹看看（别老盯着你那破小黑屏啦）</p><ul><li>如果你想克隆远程仓库的其他分支，而不是默认的master分支，你可以使用以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branchname&gt; &lt;remote-repo-url&gt;</span><br></pre></td></tr></table></figure><p>这个命令会克隆指定的分支，并自动切换到该分支。例如，你可以使用以下命令克隆远程仓库的dev分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev https://github.com/tensorflow/tensorflow.git</span><br></pre></td></tr></table></figure><hr><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="git-branch–单分支操作"><a href="#git-branch–单分支操作" class="headerlink" title="git branch–单分支操作"></a>git branch–单分支操作</h4><p>git branch是对于分支的操作的一个命令。它有很多常用的操作，例如：</p><ul><li><strong>git branch</strong>：不带参数时，可以列出<strong>本地的所有</strong>分支，当前分支有一个星号（*）标记¹²⁴。</li><li><strong>git branch -a</strong>：可以列出<strong>本地和远程</strong>的所有分支，远程分支的前缀是<code>remotes/origin/</code>²³。</li><li><strong>git branch &lt;分支名&gt;<strong>：可以</strong>创建</strong>一个新的分支，基于当前分支的最新提交¹²⁴。</li><li><strong>git branch -d &lt;分支名&gt;<strong>：可以</strong>删除</strong>一个本地分支，前提是该分支已经被合并到其他分支¹²⁴。</li><li>**git branch -D &lt;分支名&gt;*<em>：可以</em>强制删除*一个本地分支，即使该分支没有被合并到其他分支¹²⁴。</li><li><strong>git branch -m &lt;原分支名&gt; &lt;新分支名&gt;<strong>：可以</strong>重命名</strong>一个本地分支，如果新分支名已经存在，会报错¹²⁴。</li><li>**git branch -M &lt;原分支名&gt; &lt;新分支名&gt;*<em>：可以</em>强制重命名*一个本地分支，如果新分支名已经存在，会覆盖它¹²⁴。</li><li>**git branch –set-upstream-to&#x3D;origin&#x2F;&lt;远程分支名&gt; &lt;本地分支名&gt;**：可以设置本地分支和远程分支的关联关系，方便执行pull和push操作³⁵。</li></ul><p>举例说明：</p><ul><li>假设我们要在本地<strong>创建一个叫做dev的新分支，并切换到该分支</strong>，我们可以执行以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>或者使用快捷方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><ul><li>假设我们要删除dev这个本地分支，并且它已经被合并到master分支，我们可以执行以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><ul><li>假设我们要将dev这个本地分支重命名为feature，并且覆盖掉已经存在的feature分支，我们可以执行以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M dev feature</span><br></pre></td></tr></table></figure><ul><li>假设我们要设置feature这个本地分支和origin&#x2F;feature这个远程分支的关联关系，我们可以执行以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git branch --set-upstream-to=origin/feature</span><br></pre></td></tr></table></figure><h4 id="多分支操作–分支合并"><a href="#多分支操作–分支合并" class="headerlink" title="多分支操作–分支合并"></a>多分支操作–分支合并</h4><p>分支合并是指将两个或多个不同的分支的代码合并到一起，形成一个新的分支或更新一个已有的分支¹²。分支合并可以让我们在不同的开发环境中做事，并来回切换，也可以让我们将不同的功能或修复合并到主线上¹。</p><p>实现分支合并的主要命令是<strong>git merge</strong>，它可以将任何分支合并到当前分支中去¹²⁴。例如，如果我们要将dev分支合并到master分支，我们可以执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>这样就会在master分支上创建一个新的提交节点，记录这次合并的结果¹²⁴。</p><p>进行分支合并的时候，需要注意以下几点：</p><ul><li>分支合并可能会产生<strong>冲突</strong>，即两个分支对同一个文件的同一个地方做了不同的修改¹²⁴。这时候，git无法自动完成合并，需要我们手动解决冲突，并重新提交¹²⁴。</li><li>分支合并有不同的<strong>策略</strong>，例如fast-forward、recursive、ours、theirs等¹³。不同的策略会影响合并的结果和历史记录¹³。默认情况下，git会自动选择合适的策略，但我们也可以用**-s**选项来指定策略¹³。</li><li>分支合并之前，最好先更新本地和远程的代码，以保证代码是最新的²。我们可以用<strong>git pull</strong>命令来拉取远程仓库的代码，并自动合并到本地分支²⁴。</li></ul><h4 id="git-merge与git-checkout-其他用法的解析"><a href="#git-merge与git-checkout-其他用法的解析" class="headerlink" title="git merge与git checkout 其他用法的解析"></a>git merge与git checkout 其他用法的解析</h4><p>git merge 和 git checkout 这两个命令除了用于分支合并和切换之外，还有一些其他的功能：</p><p><strong>git merge</strong>的其他功能：</p><ul><li><strong>git merge –abort</strong>：可以取消正在进行的合并操作，恢复到合并之前的状态¹²。这个命令在遇到合并冲突时很有用，可以让你重新选择合并策略或者放弃合并¹²。</li><li><strong>git merge –squash</strong>：可以将目标分支的多个提交压缩成一个提交，然后合并到当前分支¹²。这个命令可以让你保持提交历史的简洁，避免过多的合并提交¹²。</li><li><strong>git merge –continue</strong>：可以在解决完合并冲突后，继续完成合并操作¹²。这个命令相当于执行了git add和git commit两个命令¹²。</li></ul><p>举例说明：</p><ul><li>假设我们要将dev分支合并到master分支，但是发生了冲突，我们可以执行以下命令来取消合并：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><ul><li>假设我们要将dev分支合并到master分支，但是dev分支有很多小的提交，我们可以执行以下命令来压缩成一个提交：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --squash dev</span><br></pre></td></tr></table></figure><ul><li>假设我们要将dev分支合并到master分支，发生了冲突，我们手动解决了冲突，我们可以执行以下命令来继续合并：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --continue</span><br></pre></td></tr></table></figure><p><strong>git checkout</strong>的其他功能：</p><ul><li>**git checkout &lt;文件名&gt;**：可以将指定文件恢复到上一次提交的状态³ 。这个命令在你修改了文件但是不想保留修改时很有用³ 。</li><li>**git checkout <commit> &lt;文件名&gt;**：可以将指定文件恢复到指定提交的状态³ 。这个命令在你想回退某个文件到某个版本时很有用³ 。</li><li><strong>git checkout -b &lt;新分支名&gt;<strong>：可以</strong>创建一个新的分支，并切换到该分支</strong>³ 。这个命令相当于执行了git branch和git checkout两个命令³ 。</li></ul><p>举例说明：</p><ul><li>假设我们修改了index.html文件，但是不想保留修改，我们可以执行以下命令来恢复文件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout index.html</span><br></pre></td></tr></table></figure><ul><li>假设我们想将index.html文件恢复到a123456这个提交的状态，我们可以执行以下命令来恢复文件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a123456 index.html</span><br></pre></td></tr></table></figure><ul><li>假设我们想创建一个新的分支feature，并切换到该分支，我们可以执行以下命令来创建和切换分支：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;清空本地的Git关联的远程仓库（删库跑路）&quot;&gt;&lt;a href=&quot;#清空本地的Git关联的远程仓库（删库跑路）&quot; class=&quot;headerlink&quot; title=&quot;清空本地的Git关联的远程仓库（删库跑路）&quot;&gt;&lt;/a&gt;清空本地的Git关联的远程仓库（删库跑路）&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://elementgc.github.io/2023/05/23/hello-world/"/>
    <id>https://elementgc.github.io/2023/05/23/hello-world/</id>
    <published>2023-05-23T12:12:58.294Z</published>
    <updated>2023-05-23T12:12:58.294Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
